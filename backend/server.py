import os
from flask import Flask, request, redirect, url_for, render_template
from werkzeug.utils import secure_filename
from flask_cors import CORS
from catboost import CatBoostClassifier, Pool, cv
from catboost.utils import get_roc_curve

import time
import numpy as np
import pandas as pd
import json

app = Flask(__name__)
CORS(app, send_wildcard=True)


etalon_columns = {2142, 2143, 2145, 2146, 2148, 2150, 2151, 2153, 2154, 2156, 2157, 2159, 2161, 2162, 2164, 2165, 2167, 2168, 2170, 2171, 2173, 2175, 2176, 2178, 2179, 2181, 2182, 2184, 2186, 2187, 2189, 2190, 2192, 2193, 2195, 2196, 2198, 2200, 2201, 2203, 2204, 2206, 2207, 2209, 2210, 2212, 2214, 2215, 2217, 2218, 2220, 2221, 2223, 2224, 2226, 2228, 2229, 2231, 2232, 2234, 2235, 2237, 2238, 2240, 2241, 2243, 2245, 2246, 2248, 2249, 2251, 2252, 2254, 2255, 2257, 2258, 2260, 2262, 2263, 2265, 2266, 2268, 2269, 2271, 2272, 2274, 2275, 2277, 2278, 2280, 2282, 2283, 2285, 2286, 2288, 2289, 2291, 2292, 2294, 2295, 2297, 2298, 2300, 2301, 2303, 2305, 2306, 2308, 2309, 2311, 2312, 2314, 2315, 2317, 2318, 2320, 2321, 2323, 2324, 2326, 2327, 2329, 2331, 2332, 2334, 2335, 2337, 2338, 2340, 2341, 2343, 2344, 2346, 2347, 2349, 2350, 2352, 2353, 2355, 2356, 2358, 2359, 2361, 2362, 2364, 2365, 2367, 2368, 2370, 2371, 2373, 2375, 2376, 2378, 2379, 2381, 2382, 2384, 2385, 2387, 2388, 2390, 2391, 2393, 2394, 2396, 2397, 2399, 2400, 2402, 2403, 2405, 2406, 2408, 2409, 2411, 2412, 2414, 2415, 2417, 2418, 2420, 2421, 2423, 2424, 2426, 2427, 2429, 2430, 2432, 2433, 2435, 2436, 2438, 2439, 2441, 2442, 2444, 2445, 2447, 2448, 2450, 2451, 2453, 2454, 2456, 2457, 2459, 2460, 2462, 2463, 2465, 2466, 2468, 2469, 2471, 2472, 2473, 2475, 2476, 2478, 2479, 2481, 2482, 2484, 2485, 2487, 2488, 2490, 2491, 2493, 2494, 2496, 2497, 2499, 2500, 2502, 2503, 2505, 2506, 2508, 2509, 2511, 2512, 2514, 2515, 2516, 2518, 2519, 2521, 2522, 2524, 2525, 2527, 2528, 2530, 2531, 2533, 2534, 2536, 2537, 2539, 2540, 2541, 2543, 2544, 2546, 2547, 2549, 2550, 2552, 2553, 2555, 2556, 2558, 2559, 2561, 2562, 2563, 2565, 2566, 2568, 2569, 2571, 2572, 2574, 2575, 2577, 2578, 2580, 2581, 2583, 2584, 2585, 2587, 2588, 2590, 2591, 2593, 2594, 2596, 2597, 2599, 2600, 2601, 2603, 2604, 2606, 2607, 2609, 2610, 2612, 2613, 2615, 2616, 2617, 2619, 2620, 2622, 2623, 2625, 2626, 2628, 2629, 2630, 2632, 2633, 2635, 2636, 2638, 2639, 2641, 2642, 2643, 2645, 2646, 2648, 2649, 2651, 2652, 2654, 2655, 2656, 2658, 2659, 2661, 2662, 2664, 2665, 2667, 2668, 2669, 2671, 2672, 2674, 2675, 2677, 2678, 2679, 2681, 2682, 2684, 2685, 2687, 2688, 2689, 2691, 2692, 2694, 2695, 2697, 2698, 2700, 2701, 2702, 2704, 2705, 2707, 2708, 2710, 2711, 2712, 2714, 2715, 2717, 2718, 2719, 2721, 2722, 2724, 2725, 2727, 2728, 2729, 2731, 2732, 2734, 2735, 2737, 2738, 2739, 2741, 2742, 2744, 2745, 2747, 2748, 2749, 2751, 2752, 2754, 2755, 2756, 2758, 2759, 2761, 2762, 2764, 2765, 2766, 2768, 2769, 2771, 2772, 2773, 2775, 2776, 2778, 2779, 2780, 2782, 2783, 2785, 2786, 2787, 2789, 2790, 2792, 2793, 2795, 2796, 2797, 2799, 2800, 2802, 2803, 2804, 2806, 2807, 2809, 2810, 2811, 2813, 2814, 2816, 2817, 2818, 2820, 2821, 2823, 2824, 2825, 2827, 2828, 2830, 2831, 2832, 2834, 2835, 2837, 2838, 2839, 2841, 2842, 2844, 2845, 2846, 2848, 2849, 2851, 2852, 2853, 2855, 2856, 2857, 2859, 2860, 2862, 2863, 2864, 2866, 2867, 2869, 2870, 2871, 2873, 2874, 2876, 2877, 2878, 2880, 2881, 2882, 2884, 2885, 2887, 2888, 2889, 2891, 2892, 2894, 2895, 2896, 2898, 2899, 2900, 2902, 2903, 2905, 2906, 2907, 2909, 2910, 2911, 2913, 2914, 2916, 2917, 2918, 2920, 2921, 2922, 2924, 2925, 2927, 2928, 2929, 2931, 2932, 2933, 2935, 2936, 2938, 2939, 2940, 2942, 2943, 2944, 2946, 2947, 2949, 2950, 2951, 2953, 2954, 2955, 2957, 2958, 2960, 2961, 2962, 2964, 2965, 2966, 2968, 2969, 2970, 2972, 2973, 2975, 2976, 2977, 2979, 2980, 2981, 2983, 2984, 2985, 2987, 2988, 2989, 2991, 2992, 2994, 2995, 2996, 2998, 2999, 3000, 3002, 3003, 3004, 3006, 3007, 3008, 3010, 3011, 3013, 3014, 3015, 3017, 3018, 3019, 3021, 3022, 3023, 3025, 3026, 3027, 3029, 3030, 3031, 3033, 3034, 3036, 3037, 3038, 3040, 3041, 3042, 3044, 3045, 3046, 3048, 3049, 3050, 3052, 3053, 3054, 3056, 3057, 3058, 3060, 3061, 3062, 3064, 3065, 3066, 3068, 3069, 3070, 3072, 3073, 3074, 3076, 3077, 3078, 3080, 3081, 3083, 3084, 3085, 3087, 3088, 3089, 3091, 3092, 3093, 3095, 3096, 3097, 3099, 3100, 3101, 3103, 3104, 3105, 3107, 3108, 3109, 3111, 3112, 3113, 3115, 3116, 3117, 3118, 3120, 3121, 3122, 3124, 3125, 3126, 3128, 3129, 3130, 3132, 3133, 3134, 3136, 3137, 3138, 3140, 3141, 3142, 3144, 3145, 3146, 3148, 3149, 3150, 3152, 3153, 3154, 3156, 3157, 3158, 3160, 3161, 3162, 3163, 3165, 3166, 3167, 3169, 3170, 3171, 3173, 3174, 3175, 3177, 3178, 3179, 3181, 3182, 3183, 3185, 3186, 3187, 3188, 3190, 3191, 3192, 3194, 3195, 3196, 3198, 3199, 3200, 3202, 3203, 3204, 3206, 3207, 3208, 3209, 3211, 3212, 3213, 3215, 3216, 3217, 3219, 3220, 3221, 3222, 3224, 3225, 3226, 3228, 3229, 3230, 3232, 3233, 3234, 3236, 3237, 3238, 3239, 3241, 3242, 3243, 3245, 3246, 3247, 3249, 3250, 3251, 3252, 3254, 3255, 3256, 3258, 3259, 3260, 3262, 3263, 3264, 3265, 3267, 3268, 3269, 3271, 3272, 3273, 3274, 3276, 3277, 3278, 3280, 3281, 3282, 3283, 3285, 3286, 3287, 3289, 3290, 3291, 3293, 3294, 3295, 3296, 3298, 3299, 3300, 3302, 3303, 3304, 3305, 3307, 3308, 3309, 3311, 3312, 3313, 3314, 3316, 3317, 3318, 3320, 3321, 3322, 3323, 3325, 3326, 3327, 3328, 3330, 3331, 3332, 3334, 3335, 3336, 3337, 3339, 3340, 3341, 3343, 3344, 3345, 3346, 3348, 3349, 3350, 3351, 3353, 3354, 3355, 3357, 3358, 3359, 3360, 3362, 3363, 3364, 3365, 3367, 3368, 3369, 3371, 3372, 3373, 3374, 3376, 3377, 3378, 3379, 3381, 3382, 3383, 3385, 3386, 3387, 3388, 3390, 3391, 3392, 3393, 3395, 3396, 3397, 3398, 3400, 3401, 3402, 3404, 3405, 3406, 3407, 3409, 3410, 3411, 3412, 3414, 3415, 3416, 3417, 3419, 3420, 3421, 3422, 3424, 3425, 3426, 3427, 3429, 3430, 3431, 3433, 3434, 3435, 3436, 3438, 3439, 3440, 3441, 3443, 3444, 3445, 3446, 3448, 3449, 3450, 3451, 3453, 3454, 3455, 3456, 3458, 3459, 3460, 3461, 3463, 3464, 3465, 3466, 3468, 3469, 3470, 3471, 3473, 3474, 3475, 3476, 3478, 3479, 3480, 3481, 3483, 3484, 3485, 3486, 3488, 3489, 3490, 3491, 3493, 3494, 3495, 3496, 3498, 3499, 3500, 3501, 3503, 3504, 3505, 3506, 3507, 3509, 3510, 3511, 3512, 3514, 3515, 3516, 3517, 3519, 3520, 3521, 3522, 3524, 3525, 3526, 3527, 3529, 3530, 3531, 3532, 3533, 3535, 3536, 3537, 3538, 3540, 3541, 3542, 3543, 3545, 3546, 3547, 3548, 3550, 3551}
columns_100 = ['2142', '2143', '2145', '2146', '2148', '2150', '2151', '2153', '2154', '2156', '2157', '2159', '2161', '2162', '2164', '2165', '2167', '2168', '2170', '2171', '2173', '2175', '2176', '2178', '2179', '2181', '2182', '2184', '2186', '2187', '2189', '2190', '2192', '2193', '2195', '2196', '2198', '2200', '2201', '2203', '2204', '2206', '2207', '2209', '2210', '2212', '2214', '2215', '2217', '2218', '2220', '2221', '2223', '2224', '2226', '2228', '2229', '2231', '2232', '2234', '2235', '2237', '2238', '2240', '2241', '2243', '2245', '2246', '2248', '2249', '2251', '2252', '2254', '2255', '2257', '2258', '2260', '2262', '2263', '2265', '2266', '2268', '2269', '2271', '2272', '2274', '2275', '2277', '2278', '2280', '2282', '2283', '2285', '2286', '2288', '2289', '2291', '2292', '2294', '2295', '2297', '2298', '2300', '2301', '2303', '2305', '2306', '2308', '2309', '2311', '2312', '2314', '2315', '2317', '2318', '2320', '2321', '2323', '2324', '2326', '2327', '2329', '2331', '2332', '2334', '2335', '2337', '2338', '2340', '2341', '2343', '2344', '2346', '2347', '2349', '2350', '2352', '2353', '2355', '2356', '2358', '2359', '2361', '2362', '2364', '2365', '2367', '2368', '2370', '2371', '2373', '2375', '2376', '2378', '2379', '2381', '2382', '2384', '2385', '2387', '2388', '2390', '2391', '2393', '2394', '2396', '2397', '2399', '2400', '2402', '2403', '2405', '2406', '2408', '2409', '2411', '2412', '2414', '2415', '2417', '2418', '2420', '2421', '2423', '2424', '2426', '2427', '2429', '2430', '2432', '2433', '2435', '2436', '2438', '2439', '2441', '2442', '2444', '2445', '2447', '2448', '2450', '2451', '2453', '2454', '2456', '2457', '2459', '2460', '2462', '2463', '2465', '2466', '2468', '2469', '2471', '2472', '2473', '2475', '2476', '2478', '2479', '2481', '2482', '2484', '2485', '2487', '2488', '2490', '2491', '2493', '2494', '2496', '2497', '2499', '2500', '2502', '2503', '2505', '2506', '2508', '2509', '2511', '2512', '2514', '2515', '2516', '2518', '2519', '2521', '2522', '2524', '2525', '2527', '2528', '2530', '2531', '2533', '2534', '2536', '2537', '2539', '2540', '2541', '2543', '2544', '2546', '2547', '2549', '2550', '2552', '2553', '2555', '2556', '2558', '2559', '2561', '2562', '2563', '2565', '2566', '2568', '2569', '2571', '2572', '2574', '2575', '2577', '2578', '2580', '2581', '2583', '2584', '2585', '2587', '2588', '2590', '2591', '2593', '2594', '2596', '2597', '2599', '2600', '2601', '2603', '2604', '2606', '2607', '2609', '2610', '2612', '2613', '2615', '2616', '2617', '2619', '2620', '2622', '2623', '2625', '2626', '2628', '2629', '2630', '2632', '2633', '2635', '2636', '2638', '2639', '2641', '2642', '2643', '2645', '2646', '2648', '2649', '2651', '2652', '2654', '2655', '2656', '2658', '2659', '2661', '2662', '2664', '2665', '2667', '2668', '2669', '2671', '2672', '2674', '2675', '2677', '2678', '2679', '2681', '2682', '2684', '2685', '2687', '2688', '2689', '2691', '2692', '2694', '2695', '2697', '2698', '2700', '2701', '2702', '2704', '2705', '2707', '2708', '2710', '2711', '2712', '2714', '2715', '2717', '2718', '2719', '2721', '2722', '2724', '2725', '2727', '2728', '2729', '2731', '2732', '2734', '2735', '2737', '2738', '2739', '2741', '2742', '2744', '2745', '2747', '2748', '2749', '2751', '2752', '2754', '2755', '2756', '2758', '2759', '2761', '2762', '2765', '2766', '2768', '2769', '2771', '2772', '2775', '2776', '2778', '2779', '2785', '2790', '2796', '2804', '2807', '2821', '2824', '2825', '2828', '2830', '2831', '2832', '2834', '2835', '2837', '2838', '2839', '2841', '2842', '2844', '2845', '2846', '2848', '2849', '2851', '2852', '2853', '2855', '2856', '2857', '2859', '2860', '2862', '2863', '2864', '2866', '2867', '2869', '2870', '2871', '2873', '2874', '2876', '2877', '2878', '2880', '2881', '2882', '2884', '2885', '2887', '2888', '2889', '2891', '2892', '2894', '2895', '2896', '2898', '2899', '2900', '2902', '2903', '2905', '2906', '2907', '2909', '2910', '2911', '2913', '2914', '2916', '2917', '2918', '2920', '2921', '2922', '2924', '2925', '2927', '2928', '2929', '2931', '2932', '2933', '2935', '2936', '2938', '2939', '2940', '2942', '2943', '2944', '2946', '2947', '2949', '2950', '2951', '2953', '2954', '2955', '2957', '2958', '2960', '2961', '2962', '2964', '2965', '2966', '2968', '2969', '2970', '2972', '2973', '2975', '2976', '2977', '2979', '2980', '2981', '2983', '2984', '2985', '2988', '2989', '2995', '2998', '2999', '3000', '3002', '3004', '3006', '3007', '3008', '3010', '3011', '3013', '3014', '3015', '3017', '3018', '3019', '3021', '3022', '3023', '3025', '3026', '3027', '3029', '3030', '3031', '3033', '3034', '3036', '3037', '3038', '3040', '3041', '3042', '3044', '3045', '3046', '3048', '3049', '3050', '3052', '3053', '3054', '3056', '3057', '3058', '3060', '3061', '3062', '3064', '3065', '3066', '3068', '3069', '3070', '3072', '3073', '3074', '3076', '3077', '3078', '3080', '3081', '3083', '3084', '3085', '3087', '3088', '3089', '3091', '3092', '3093', '3096', '3097', '3099', '3100', '3103', '3104', '3108', '3109', '3112', '3115', '3117', '3122', '3124', '3125', '3126', '3134', '3141', '3144', '3145', '3148', '3149', '3150', '3152', '3153', '3154', '3156', '3158', '3160', '3162', '3163', '3165', '3166', '3167', '3169', '3170', '3171', '3173', '3174', '3175', '3177', '3178', '3179', '3181', '3182', '3183', '3185', '3186', '3187', '3188', '3190', '3191', '3192', '3194', '3195', '3196', '3198', '3199', '3200', '3202', '3203', '3204', '3206', '3207', '3208', '3209', '3211', '3212', '3213', '3215', '3216', '3217', '3219', '3220', '3221', '3222', '3224', '3225', '3226', '3228', '3229', '3230', '3232', '3233', '3234', '3236', '3237', '3238', '3239', '3241', '3242', '3243', '3245', '3246', '3247', '3249', '3250', '3251', '3252', '3254', '3255', '3256', '3258', '3259', '3260', '3262', '3263', '3264', '3265', '3267', '3268', '3269', '3271', '3272', '3273', '3274', '3276', '3277', '3278', '3280', '3281', '3282', '3283', '3285', '3286', '3287', '3289', '3290', '3291', '3293', '3294', '3295', '3296', '3298', '3300', '3302', '3303', '3304', '3305', '3307', '3308', '3309', '3311', '3313', '3316', '3317', '3377', '3379', '3381', '3386', '3390', '3392', '3393', '3395', '3396', '3397', '3398', '3400', '3401', '3402', '3404', '3405', '3406', '3407', '3409', '3410', '3411', '3412', '3414', '3415', '3416', '3417', '3419', '3420', '3421', '3422', '3424', '3425', '3426', '3427', '3429', '3430', '3431', '3433', '3434', '3435', '3436', '3438', '3439', '3440', '3441', '3443', '3444', '3445', '3446', '3448', '3449', '3450', '3451', '3453', '3454', '3455', '3456', '3458', '3459', '3460', '3461', '3463', '3464', '3465', '3466', '3468', '3469', '3470', '3471', '3473', '3474', '3475', '3476', '3478', '3479', '3480', '3481', '3483', '3484', '3485', '3486', '3488', '3489', '3490', '3491', '3493', '3494', '3495', '3496', '3498', '3499', '3500', '3501', '3503', '3504', '3505', '3506', '3507', '3509', '3510', '3511', '3512', '3514', '3515', '3516', '3517', '3519', '3520', '3521', '3522', '3524', '3525', '3526', '3527', '3529', '3530', '3531', '3532', '3533', '3535', '3536', '3537', '3538', '3540', '3541', '3542', '3543', '3545', '3546', '3547', '3548', '3550', '3551']
columns30 = ['2142', '2143', '2145', '2146', '2148', '2150', '2151', '2153', '2154', '2156', '2157', '2159', '2161', '2162', '2164', '2165', '2167', '2168', '2170', '2171', '2173', '2175', '2176', '2178', '2179', '2181', '2182', '2184', '2186', '2187', '2189', '2190', '2192', '2193', '2195', '2196', '2198', '2200', '2201', '2203', '2204', '2206', '2207', '2209', '2210', '2212', '2214', '2215', '2217', '2218', '2220', '2221', '2223', '2224', '2226', '2228', '2229', '2231', '2232', '2234', '2235', '2237', '2238', '2240', '2241', '2243', '2245', '2246', '2248', '2249', '2251', '2252', '2254', '2255', '2257', '2258', '2260', '2262', '2263', '2265', '2266', '2268', '2269', '2271', '2272', '2274', '2275', '2277', '2278', '2280', '2282', '2283', '2285', '2286', '2288', '2289', '2291', '2292', '2294', '2295', '2297', '2298', '2300', '2302', '2303', '2305', '2306', '2308', '2309', '2311', '2312', '2314', '2315', '2317', '2318', '2320', '2321', '2323', '2324', '2326', '2327', '2329', '2331', '2332', '2334', '2335', '2337', '2338', '2340', '2341', '2343', '2344', '2346', '2347', '2349', '2350', '2352', '2353', '2355', '2356', '2358', '2359', '2361', '2362', '2364', '2365', '2367', '2368', '2370', '2372', '2373', '2375', '2376', '2378', '2379', '2381', '2382', '2384', '2385', '2387', '2388', '2390', '2391', '2393', '2394', '2396', '2397', '2399', '2400', '2402', '2403', '2405', '2406', '2408', '2409', '2411', '2412', '2414', '2415', '2417', '2418', '2420', '2421', '2423', '2424', '2426', '2427', '2429', '2430', '2432', '2433', '2435', '2436', '2438', '2439', '2441', '2442', '2444', '2445', '2447', '2448', '2450', '2451', '2453', '2454', '2456', '2457', '2459', '2468', '2469', '2471', '2472', '2474', '2475', '2476', '2478', '2479', '2481', '2482', '2484', '2485', '2487', '2488', '2490', '2491', '2493', '2494', '2496', '2497', '2499', '2500', '2502', '2503', '2505', '2506', '2508', '2509', '2511', '2512', '2514', '2515', '2516', '2518', '2519', '2521', '2522', '2524', '2525', '2527', '2528', '2530', '2531', '2533', '2534', '2536', '2537', '2539', '2540', '2542', '2543', '2544', '2546', '2547', '2549', '2550', '2552', '2553', '2555', '2556', '2558', '2559', '2561', '2562', '2564', '2565', '2566', '2568', '2569', '2571', '2572', '2574', '2575', '2577', '2578', '2580', '2581', '2583', '2584', '2585', '2587', '2588', '2590', '2591', '2593', '2594', '2596', '2597', '2599', '2600', '2601', '2603', '2604', '2606', '2607', '2609', '2613', '2615', '2617', '2619', '2672', '2674', '2675', '2677', '2678', '2679', '2681', '2682', '2684', '2685', '2687', '2688', '2690', '2691', '2692', '2694', '2695', '2697', '2698', '2700', '2701', '2702', '2704', '2705', '2707', '2708', '2710', '2711', '2712', '2714', '2715', '2717', '2718', '2720', '2721', '2722', '2724', '2725', '2727', '2728', '2729', '2731', '2732', '2742', '2745', '2747', '2748', '2749', '2751', '2752', '2754', '2755', '2756', '2758', '2759', '2761', '2762', '2764', '2765', '2766', '2768', '2769', '2773', '2782', '2785', '2786', '2792', '2797', '2800', '2802', '2803', '2804', '2806', '2809', '2813', '2814', '2816', '2821', '2823', '2824', '2825', '2827', '2828', '2848', '2849', '2851', '2852', '2853', '2855', '2856', '2857', '2859', '2860', '2862', '2863', '2864', '2866', '2867', '2869', '2870', '2871', '2873', '2874', '2876', '2877', '2887', '2889', '2891', '2917', '2920', '2921', '2923', '2924', '2925', '2927', '2928', '2929', '2931', '2932', '2933', '2935', '2936', '2938', '2939', '2940', '2942', '2943', '2944', '2946', '2947', '2949', '2950', '2951', '3105', '3128', '3129', '3130', '3133', '3154', '3156', '3157', '3160', '3161', '3169', '3290', '3296', '3298', '3300', '3303', '3305', '3309', '3311', '3312', '3313', '3314', '3316', '3317', '3318', '3320', '3321', '3322', '3323', '3325', '3326', '3327', '3328', '3330', '3331', '3332', '3334', '3335', '3336', '3337', '3339', '3340', '3341', '3343', '3344', '3345', '3346', '3348', '3349', '3350', '3351', '3353', '3354', '3355', '3357', '3358', '3359', '3360', '3362', '3363', '3364', '3366', '3367', '3368', '3369', '3371', '3372', '3373', '3374', '3376', '3377', '3378', '3379', '3381', '3382', '3383', '3385', '3386', '3387', '3388', '3390', '3391', '3392', '3393', '3395', '3396', '3397', '3398', '3400', '3401', '3402', '3404', '3405', '3406', '3407', '3409', '3410', '3412', '3414', '3420', '3434', '3439', '3440', '3441', '3445', '3449', '3454', '3458', '3460', '3461', '3463', '3465', '3469', '3470', '3471', '3473', '3474', '3475', '3476', '3478', '3479', '3480', '3481', '3483', '3484', '3485', '3486', '3488', '3489', '3490', '3491', '3493', '3494', '3495', '3496', '3498', '3499', '3500', '3501', '3503', '3504', '3505', '3506', '3507', '3509', '3510', '3511', '3512', '3514', '3515', '3516', '3517', '3519', '3520', '3521', '3522', '3524', '3525', '3526', '3527', '3529', '3530', '3531', '3532', '3533', '3535', '3536', '3537', '3538', '3540', '3541', '3542', '3543', '3545', '3546', '3547', '3548', '3550']


def get_test_file(filename):
    df = pd.DataFrame()

    data = pd.read_csv(filename, sep='\t')
    data = data.iloc[:, :2]
    data.columns = ['#Wave', '#Intensity']

    # Удаление ненужных колонок
    data = data.astype(float)
    data['#Wave'] = np.ceil(data['#Wave']).astype(int)

    # Нумеруем блоки по 1015 строк
    try:
        data["Block"] = (data.index // 1015) + 1

        # print(data.shape)

        data_reshape = data.pivot(index='Block', columns='#Wave', values='#Intensity').reset_index(
            drop=True)
        data_reshape.columns = etalon_columns
    except Exception as ex:
        pass
    df = pd.concat([df, data_reshape], axis=0, ignore_index=True)
    return df



def get_data(filename: str) -> pd.DataFrame:
    df = pd.DataFrame()
    if filename.endswith(".txt"):
        data = pd.read_csv(filename, sep='\t')
        print('Загружен', filename)

        # Оставляем первые 2 столбца, переименовываем
        data = data.iloc[:, :2]
        data.columns = ['#Wave', '#Intensity']

        # Удаление ненужных колонок
        data = data.astype(float)
        data['#Wave'] = np.ceil(data['#Wave']).astype(int)

        # Нумеруем блоки по 1015 строк
        try:
            data["Block"] = (data.index // 1015) + 1

            # print(data.shape)

            data_reshape = data.pivot(index='Block', columns='#Wave', values='#Intensity').reset_index(
                drop=True)
            data_reshape.columns = etalon_columns
        except Exception as ex:
            return None
    df = pd.concat([df, data_reshape], axis=0, ignore_index=True)
    return df


def get_add_column(df):
    cols = df.columns
    N = 100

    # Самое большое значение на последнем месте
    top_cols = np.argsort(df.iloc[:, :-1].values, axis=1)[:, -N:]
    test = []
    for i in top_cols[0]:
        a = df.iloc[:, i: i + 1].columns.to_list()[0]
        test.append(a)
    test.reverse()

    # Получение уникальных номеров ТОП столбцов
    unique_top_cols = np.arange(df.shape[1] - 1)

    # Создание пустого датафрейма для разреженной матрицы
    new_df = pd.DataFrame(index=df.index, columns=columns_100)
    new_df = new_df.fillna(0).astype(int)

    new_df.columns = [int(x) for x in columns_100]

    for i, j in enumerate(test):
        new_df[j] = N - i - 1

    new_df.columns = [f'TOP{N} {x}' for x in new_df.columns]

    # Получение 30 столбцов c минимальными интенсивностми для кажой строки
    M = 30

    down_cols = np.argsort(df.iloc[:, :-1].values, axis=1)[:, :M]
    test = []
    for i in down_cols[0]:
        a = df.iloc[:, i: i + 1].columns.to_list()[0]
        test.append(a)
    test.reverse()

    # Получение уникальных номеров ТОП столбцов
    unique_down_cols = unique_top_cols

    # Создание пустого датафрейма для разреженной матрицы
    new_df2 = pd.DataFrame(index=df.index, columns=columns30)
    new_df2 = new_df2.fillna(0).astype(int)

    new_df2.columns = [int(x) for x in columns30]

    for i, j in enumerate(test):
        new_df2[j] = M - i - 1

    new_df2.columns = [f'D{N} {x}' for x in new_df2.columns]

    df = pd.concat([df, new_df, new_df2], axis=1)
    return df


def get_svc(filename, type):
    # if type == "zip":
    #     f = sunzip.Sunzip(filename)
    #     f.output_dir = filename
    #     f.threshold = 50
    #     f.cpu = 1
    #     f.memory = 1024
    #     f.extract()
    if type == "txt":
        df = get_data(filename)
        if df:
            df = get_add_column(df)
    return df


def get_file(filename):
    name = filename
    extension = name.split('.')
    if len(extension) < 2:
        render_template('error.html')
    if len(extension) > 2:
        render_template('error.html')
    type = extension[1]
    return get_svc(filename, type)


@app.route('/', methods=['GET', 'POST'])
def main_page():
    if request.method == 'POST':
        file = request.files['file']
        type = request['type']
        print(type)
        filename = secure_filename(file.filename)
        file.save(filename, type)
        return prediction(filename)
    else:
       return app.response_class(status=200, response=json.dumps({}))


@app.route('/prediction/<filename>')
def prediction(filename, type):
    df = get_file(filename)
    model = CatBoostClassifier()
    model.load_model('backend/catboost_model')
    predictions = model.predict(df)
    print(predictions)
    predictions = "Вы здоровы!" if not predictions[0] else "Отрицательный"
    return app.response_class(response=json.dumps({'result': predictions}))


if __name__ == '__main__':

    app.run(host='0.0.0.0', port=80)
